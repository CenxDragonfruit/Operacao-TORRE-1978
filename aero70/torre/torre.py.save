#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import sys
import os
from datetime import datetime

def handle_importar_dados(args):
print("-> Verificando arquivos de dados...")

    arquivos_necessarios = [
        "dados/planos_voo.csv",
        "dados/pistas.txt",
        "dados/frota.csv",
        "dados/pilotos.csv",
        "dados/metar.txt",
        "dados/notam.txt"
    ]

    tudo_ok = True

    # Loop para verificar cada arquivo
 for arquivo in arquivos_necessarios:
        if not os.path.exists(arquivo):
            # Se o arquivo NÃO existe...
            mensagem_erro = f"ERRO: Arquivo obrigatório não encontrado: {arquivo}"
            print(mensagem_erro)
            escrever_log(mensagem_erro) # Vamos criar essa função logo abaixo
            tudo_ok = False

    if tudo_ok:
        # Se todos os arquivos foram encontrados...
        mensagem_sucesso = "SUCESSO: Todos os arquivos de dados foram encontrados e validados."
        print(mensagem_sucesso)
        escrever_log(mensagem_sucesso)
    else:
        print("-> A importação falhou. Verifique os erros acima.")

def handle_listar(args):
    print("-> Lógica para LISTAR voos será implementada aqui.")
    print(f"Listar por: {args.por}")

def handle_enfileirar(args):
    print("-> Lógica para ENFILEIRAR um voo será implementada aqui.")
    print(f"Fila: {args.fila}, Voo: {args.voo}")

def handle_autorizar(args):
    print("-> Lógica para AUTORIZAR uma operação será implementada aqui.")
    print(f"Operação: {args.operacao}, Pista: {args.pista}")

def handle_status(args):
    print("-> Lógica para exibir o STATUS será implementada aqui.")
    print(f"Argumentos recebidos: {args}")

def handle_relatorio(args):
    print("-> Lógica para gerar o RELATÓRIO será implementada aqui.")
    print(f"Argumentos recebidos: {args}")


# --- Ponto de Entrada Principal do Script ---
if __name__ == "__main__":
    # 1. Cria o parser principal
    parser = argparse.ArgumentParser(description="CLI da Torre de Controle - Operação TORRE 1978")
    subparsers = parser.add_subparsers(dest='command', required=True, help='Subcomandos disponíveis')

    # 2. Comando: importar-dados
    parser_importar = subparsers.add_parser('importar-dados', help='Importa e valida os arquivos de dados iniciais.')
    parser_importar.set_defaults(func=handle_importar_dados)

    # 3. Comando: listar
    parser_listar = subparsers.add_parser('listar', help='Lista os planos de voo.')
    parser_listar.add_argument('--por', type=str, default='etd', choices=['voo', 'etd', 'tipo', 'prioridade'], help='Critério de ordenação.')
    parser_listar.set_defaults(func=handle_listar)

    # 4. Comando: enfileirar
    parser_enfileirar = subparsers.add_parser('enfileirar', help='Adiciona um voo a uma fila.')
    parser_enfileirar.add_argument('fila', choices=['decolagem', 'pouso'], help='A fila para adicionar o voo.')
    parser_enfileirar.add_argument('--voo', type=str, required=True, help='Código do voo a ser enfileirado.')
    parser_enfileirar.set_defaults(func=handle_enfileirar)

    # 5. Comando: autorizar
    parser_autorizar = subparsers.add_parser('autorizar', help='Autoriza a próxima operação de uma fila.')
    parser_autorizar.add_argument('operacao', choices=['decolagem', 'pouso'], help='O tipo de operação a autorizar.')
    parser_autorizar.add_argument('--pista', type=str, required=True, help='Pista usada para a operação.')
    parser_autorizar.set_defaults(func=handle_autorizar)

    # 6. Comando: status
    parser_status = subparsers.add_parser('status', help='Exibe o status atual das pistas, filas e ocorrências.')
    parser_status.set_defaults(func=handle_status)

    # 7. Comando: relatorio
    parser_relatorio = subparsers.add_parser('relatorio', help='Gera o relatório final do turno.')
    parser_relatorio.set_defaults(func=handle_relatorio)

    # 8. Analisa os argumentos da linha de comando
    args = parser.parse_args()

    # 9. Chama a função associada ao comando que o usuário digitou
    if hasattr(args, 'func'):
        args.func(args)
    else:
        # Se o comando não for encontrado (não deveria acontecer com 'required=True')
        parser.print_help()
        sys.exit(1)
